var e=(e,t,r=500)=>class extends Error{name="DirectusError";extensions;code=e.toUpperCase();status=r;constructor(e,r){super("string"==typeof t?t:t(e),r),this.extensions=e}toString(){return`${this.name} [${this.code}]: ${this.message}`}};const t=e("INVALID_REQUEST_ERROR","The request appears invalid or not genuine.",400),r=e("INVALID_REQUEST_ERROR","The captcha service is not set up correctly.",500),s=e("INVALID_REQUEST_ERROR","The request includes a honeypot value.",400),n=e("INVALID_REQUEST_ERROR","The request is missing a captcha value.",400),a=e("INVALID_REQUEST_ERROR","The captcha value supplied is not valid.",400);function o(e,r){return"dev"==e?new r:new t}var c=({filter:e},{env:t})=>{e("form_contact.items.create",(async e=>{const c=e,i=t.ENVIRONMENT||"live";if(c.honeypot)throw o(i,s);if(!c.captcha)throw o(i,n);if(!t.CAPTCHA_VERIFICATION_URL||!t.CAPTCHA_SECRET)throw o(i,r);if(!await async function(e,t){try{const r=await fetch(e.url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({secret:e.secret,response:t}).toString()}),s=await r.json();return null==s?void 0:s.success}catch(e){return console.log(e),!1}}({url:t.CAPTCHA_VERIFICATION_URL,secret:t.CAPTCHA_SECRET},c.captcha))throw o(i,a);return e}))};export{c as default};
