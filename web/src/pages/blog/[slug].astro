---
import {apiClient} from "@lib/api/api-client";
import GlobalLayout from "../../patterns/layouts/GlobalLayout/GlobalLayout.astro";
import {BlogPost} from "../../lib/api/types/content/blog-post";
import ContentHero from "../../patterns/components/ContentHero/ContentHero.astro";
import {JArrowLink, JBadge} from "@ben-ryder/jigsaw-react";
import CardSimpleListing from "../../patterns/components/CardSimpleListing/CardSimpleListing.astro";
import {formatTimestamp} from "../../lib/api/utils/format-timestamp";
import {getReadingTime} from "../../lib/api/utils/get-reading-time";
import LoadCodeHighlighting from "../../patterns/components/LoadCodeHighlighting.astro";

export async function getStaticPaths() {
	const blogPosts = await apiClient.getBlogPosts()

	return blogPosts.map((blogPost) => ({
		params: { slug: blogPost.slug },
		props: blogPost,
	}));
}

const blogPost: BlogPost = Astro.props;

const metadata = [
	[
		{
			icon: "clock",
			text: getReadingTime(blogPost.contentHtml)
		},
	],
	[
		{
			icon: "calendar",
			text: `Published ${formatTimestamp(blogPost.datePublished || blogPost.dateCreated)}`,
		}
	]
]
if (blogPost.dateUpdated) {
	metadata[1].push({
		icon: "pencil",
		text: `Updated ${formatTimestamp(blogPost.dateUpdated)}`,
	})
}
---

<GlobalLayout title={blogPost.title}>
	<ContentHero
		title={blogPost.title}
		metadata={metadata}
		tags={blogPost.tags}
	/>

	<div class="max-width-container container-spacing">
		<JArrowLink href="/blog" direction="left">All Blog Posts</JArrowLink>
	</div>

	<div class="max-width-container">
		<div class="j-prose" set:html={blogPost.contentHtml} />
	</div>

	{(blogPost.relatedProjects.length > 0 || blogPost.relatedBlogPosts.length > 0) &&
		<div class="max-width-container j-prose">
			<hr />
		</div>
	}

	{blogPost.relatedProjects.length > 0 &&
		<CardSimpleListing
			title="👨‍💻 Related Projects"
			cards={blogPost.relatedProjects.map(project => {
				return {
					title: project.name,
					description: project.description,
					link: `/projects/${project.slug}`
				}
			})}
		/>
	}

	{blogPost.relatedBlogPosts.length > 0 &&
		<CardSimpleListing
			title="🗒️ Related Blog Posts"
			cards={blogPost.relatedBlogPosts.map(blogPost => {
				return {
					title: blogPost.title,
					description: blogPost.description,
					link: `/blog/${blogPost.slug}`
				}
			})}
		/>
	}
</GlobalLayout>

<LoadCodeHighlighting />
